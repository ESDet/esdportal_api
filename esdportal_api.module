<?php

/**
 * @file esdportal_api.module
 */

use Tobscure\JsonApi\Document;
use Tobscure\JsonApi\SerializerAbstract;
use Drupal\esdportal_api\Serializers\EcSerializer;

define("ESDPORTAL_API_DEFAULT_LIMIT", 100);
define("ESDPORTAL_API_MAX_LIMIT", 1000);

/**
 * Implements hook_services_resources().
 *
 * Defines resources for special (non-standard) ESD Portal data.
 */
function esdportal_api_services_resources() {
  $api = array(
    'ecs' => array(
      'operations' => array(
        'retrieve' => array(
          'help' => 'Retrieves Early Childhood Center',
          'callback' => '_esdportal_api_retrieve_ec',
          'access callback' => 'user_access',
          'access arguments' => array('access content'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'id',
              'type' => 'int',
              'description' => 'ec entity ID',
              'source' => array('path' => '0'),
              'optional' => FALSE,
              'default value' => NULL,
            ),
          ),
        ),
        'index' => array(
          'help' => 'Lists Early Childhood Centers',
          'callback' => '_esdportal_api_index_ecs',
          'access arguments' => array('access content'),
          'args' => array(
            array(
              'name' => 'limit',
              'type' => 'int',
              'description' => 'Limit response count (default ' . ESDPORTAL_API_DEFAULT_LIMIT . ')',
              'source' => array('param' => 'limit'),
              'optional' => TRUE,
              'default value' => ESDPORTAL_API_DEFAULT_LIMIT,
            ),
            array(
              'name' => 'offset',
              'type' => 'int',
              'description' => 'Offset starting record',
              'source' => array('param' => 'offset'),
              'optional' => TRUE,
              'default value' => 0,
            ),
            array(
              'name' => 'filters',
              'type' => 'array',
              'description' => 'Filter properties',
              'source' => array('param' => 'filters'),
              'optional' => TRUE,
              'default value' => array(),
            ),
            array(
              'name' => 'sort',
              'type' => 'array',
              'description' => 'Sort by property and order by value (ASC or DESC)',
              'source' => array('param' => 'sort'),
              'optional' => TRUE,
              'default value' => array(),
            ),
          ),
        ),
      ),
    ),
    'ec_state_ratings' => array(
      'operations' => array(
        'retrieve' => array(
          'help' => 'Retrieves state ratings for an Early Childhood Center',
          'callback' => '_esdportal_api_retrieve_ec_state_rating',
          'access callback' => 'user_access',
          'access arguments' => array('access content'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'esd_ec_id',
              'type' => 'int',
              'description' => 'ESD-universe early childhood center ID',
              'source' => array('path' => '0'),
              'optional' => FALSE,
              'default value' => NULL,
            ),
            array(
              'name' => 'batch_timestamp',
              'type' => 'int',
              'description' => 'UNIX timestamp of a specific batch (if not provided, returns most recent rating)',
              'source' => array('param' => 'batch_timestamp'),
              'optional' => TRUE,
              'default value' => NULL,
            ),
          ),
        ),
        'index' => array(
          'help' => 'Lists most recent Early Childhood Center state ratings',
          'callback' => '_esdportal_api_index_ec_state_ratings',
          'access arguments' => array('access content'),
          'args' => array(
            array(
              'name' => 'batch_timestamp',
              'type' => 'int',
              'description' => 'UNIX timestamp of a specific batch (if not provided, returns most recent ratings)',
              'source' => array('path' => '1'),
              'optional' => TRUE,
              'default value' => NULL,
            ),
          ),
        ),
      ),
    ),
  );

  return $api;
}

/**
 * Stub.
 */
function _esdportal_api_retrieve_ec($id) {
  $document = new Document;

  $ec = taxonomy_term_load($id);

  $serializer = new EcSerializer();

  $resource = $serializer->resource($ec);

  $document->setData($resource);

  return $document->toArray();
}

/**
 * Stub.
 */
function _esdportal_api_index_ecs($limit, $offset, $filters, $sort) {
  return false;
}

/**
 * Retrieves a single EC Center's rating with given timestamp or most recent timestamp if none is given.
 *
 * @param $esd_ec_id
 *
 * @param $batch_timestamp
 */
function _esdportal_api_retrieve_ec_state_rating($esd_ec_id, $batch_timestamp) {
  if (isset($batch_timestamp) && $batch_timestamp > 0) {
    $rating = db_query('SELECT * FROM {ec_state_ratings} WHERE timestamp=:batch_timestamp AND esd_ec_id=:esd_ec_id', array(':esd_ec_id' => $esd_ec_id, ':batch_timestamp' => $batch_timestamp))->fetchAssoc();
  } else {
    $rating = db_query('SELECT * FROM {ec_state_ratings} WHERE timestamp=(SELECT MAX(timestamp) FROM {ec_state_ratings}) AND esd_ec_id=:esd_ec_id', array(':esd_ec_id' => $esd_ec_id))->fetchAssoc();
  }
  return $rating;
}

/**
 * Lists all batch timestamps.
 *
 * (not offered via api yet)
 */
function _esdportal_api_index_ec_state_ratings_batches() {
  return db_query('SELECT DISTINCT(timestamp) FROM {ec_state_ratings} ORDER BY timestamp DESC')->fetchAssoc();
}

/**
 * Lists set of EC state ratings with given timestamp or most recent timestamp if none is given.
 *
 * @param int $batch_timestamp
 */
function _esdportal_api_index_ec_state_ratings($batch_timestamp) {
  if (isset($batch_timestamp) && $batch_timestamp > 0) {
    $ratings = db_query('SELECT * FROM {ec_state_ratings} WHERE timestamp=:batch_timestamp', array(':batch_timestamp' => $batch_timestamp))->fetchAssoc();
  } else {
    $ratings = db_query('SELECT * FROM {ec_state_ratings} WHERE timestamp=(SELECT MAX(timestamp) FROM {ec_state_ratings})')->fetchAll();
  }

  return array('ec_state_ratings' => $ratings);
}
