<?php

/**
 * @file
 * esdportal_api.module
 */

use Tobscure\JsonApi\Document;
use Drupal\esdportal_api\Serializers\EcSerializer;
use Drupal\esdportal_api\Serializers\SchoolSerializer;
use Drupal\esdportal_api\EcDataUtils;

define("ESDPORTAL_API_DEFAULT_LIMIT", 100);
define("ESDPORTAL_API_MAX_LIMIT", 1000);

/**
 * Implements hook_services_resources().
 *
 * Defines resources for special (non-standard) ESD Portal data.
 */
function esdportal_api_services_resources() {
  $api = array(
    'ecs' => array(
      'operations' => array(
        'retrieve' => array(
          'help' => 'Retrieves Early Childhood Center',
          'callback' => '_esdportal_api_retrieve_ec',
          'access callback' => 'user_access',
          'access arguments' => array('access content'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'id',
              'type' => 'int',
              'description' => 'ec entity ID',
              'source' => array('path' => '0'),
              'optional' => FALSE,
              'default value' => NULL,
            ),
            array(
              'name' => 'flatten_fields',
              'type' => 'int',
              'description' => 'Remove localization structure from fields if true',
              'source' => array('param' => 'flatten_fields'),
              'optional' => TRUE,
              'default value' => 0,
            ),
          ),
        ),
        'index' => array(
          'help' => 'Lists Early Childhood Centers',
          'callback' => '_esdportal_api_index_ecs',
          'access arguments' => array('access content'),
          'args' => array(
            array(
              'name' => 'includes',
              'type' => 'string',
              'description' => 'Include other datasets, comma-separated (current options: ec_profile, most_recent_ec_state_rating)',
              'source' => array('param' => 'includes'),
              'optional' => TRUE,
              'default value' => NULL,
            ),
            array(
              'name' => 'limit',
              'type' => 'int',
              'description' => 'Limit response count (default ' . ESDPORTAL_API_DEFAULT_LIMIT . ')',
              'source' => array('param' => 'limit'),
              'optional' => TRUE,
              'default value' => ESDPORTAL_API_DEFAULT_LIMIT,
            ),
            array(
              'name' => 'offset',
              'type' => 'int',
              'description' => 'Offset starting record',
              'source' => array('param' => 'offset'),
              'optional' => TRUE,
              'default value' => 0,
            ),
            array(
              'name' => 'flatten_fields',
              'type' => 'int',
              'description' => 'Remove localization structure from fields if true',
              'source' => array('param' => 'flatten_fields'),
              'optional' => TRUE,
              'default value' => 0,
            ),
          ),
        ),
      ),
    ),
    'ec_state_ratings' => array(
      'operations' => array(
        'retrieve' => array(
          'help' => 'Retrieves state ratings for an Early Childhood Center',
          'callback' => '_esdportal_api_retrieve_ec_state_rating',
          'access callback' => 'user_access',
          'access arguments' => array('access content'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'esd_ec_id',
              'type' => 'int',
              'description' => 'ESD-universe early childhood center ID',
              'source' => array('path' => '0'),
              'optional' => FALSE,
              'default value' => NULL,
            ),
            array(
              'name' => 'batch_timestamp',
              'type' => 'int',
              'description' => 'UNIX timestamp of a specific batch (if not provided, returns most recent rating)',
              'source' => array('param' => 'batch_timestamp'),
              'optional' => TRUE,
              'default value' => NULL,
            ),
          ),
        ),
        'index' => array(
          'help' => 'Lists most recent Early Childhood Center state ratings',
          'callback' => '_esdportal_api_index_ec_state_ratings',
          'access arguments' => array('access content'),
          'args' => array(
            array(
              'name' => 'batch_timestamp',
              'type' => 'int',
              'description' => 'UNIX timestamp of a specific batch (if not provided, returns most recent ratings)',
              'source' => array('path' => '1'),
              'optional' => TRUE,
              'default value' => NULL,
            ),
          ),
        ),
      ),
    ),
    'schools' => array(
      'operations' => array(
        'retrieve' => array(
          'help' => 'Retrieves School',
          'callback' => '_esdportal_api_retrieve_school',
          'access callback' => 'user_access',
          'access arguments' => array('access content'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'id',
              'type' => 'int',
              'description' => 'school entity ID',
              'source' => array('path' => '0'),
              'optional' => FALSE,
              'default value' => NULL,
            ),
            array(
              'name' => 'includes',
              'type' => 'string',
              'description' => 'Include other datasets, comma-separated (current options: school_profile, ' . implode(', ', _esdportal_api_get_school_data_tables()) . ')',
              'source' => array('param' => 'includes'),
              'optional' => TRUE,
              'default value' => NULL,
            ),
            array(
              'name' => 'flatten_fields',
              'type' => 'int',
              'description' => 'Remove localization structure from fields if true',
              'source' => array('param' => 'flatten_fields'),
              'optional' => TRUE,
              'default value' => 0,
            ),
          ),
        ),
        'index' => array(
          'help' => 'Lists Schools',
          'callback' => '_esdportal_api_index_schools',
          'access arguments' => array('access content'),
          'args' => array(
            array(
              'name' => 'includes',
              'type' => 'string',
              'description' => 'Include other datasets, comma-separated (current options: school_profile, ' . implode(', ', _esdportal_api_get_school_data_tables()) . ')',
              'source' => array('param' => 'includes'),
              'optional' => TRUE,
              'default value' => NULL,
            ),
            array(
              'name' => 'limit',
              'type' => 'int',
              'description' => 'Limit response count (default ' . ESDPORTAL_API_DEFAULT_LIMIT . ')',
              'source' => array('param' => 'limit'),
              'optional' => TRUE,
              'default value' => ESDPORTAL_API_DEFAULT_LIMIT,
            ),
            array(
              'name' => 'offset',
              'type' => 'int',
              'description' => 'Offset starting record',
              'source' => array('param' => 'offset'),
              'optional' => TRUE,
              'default value' => 0,
            ),
            array(
              'name' => 'flatten_fields',
              'type' => 'int',
              'description' => 'Remove localization structure from fields if true',
              'source' => array('param' => 'flatten_fields'),
              'optional' => TRUE,
              'default value' => 0,
            ),
          ),
        ),
      ),
    ),

  );

  return $api;
}

/**
 * Retrieves a single early childhood center.
 *
 * @param int $id
 *   ESD internal ec id.
 * @param bool $flatten_fields
 *   If true, remove l10n structure & other drupal crap from response.
 *
 * @return array
 *   Nested array of the ec data.
 */
function _esdportal_api_retrieve_ec($id, $flatten_fields = FALSE) {
  $document = new Document();

  $ec = taxonomy_term_load($id);
  if (!$ec) {
    return services_error(t('early childhood center @id does not exist.', array('@id' => $id)), 404);
  }

  $ec->ec_profile_id = _esdportal_api_get_related_nid('ec_profile', $ec);

  if ($ec->ec_profile_id) {
    $ec->ec_profile = node_load($ec->ec_profile_id);

    if ($flatten_fields) {
      _esdportal_api_flatten_entity_fields('node', $ec->ec_profile);
    }
  }

  if ($flatten_fields) {
    _esdportal_api_flatten_entity_fields('taxonomy_term', $ec);
  }

  $ec->most_recent_ec_state_rating = (object) _esdportal_api_retrieve_ec_state_rating(\Drupal\esdportal_api\EcDataUtils::getEcId($ec));
  $ec->most_recent_ec_state_rating_id = $ec->most_recent_ec_state_rating->rating_id;

  $serializer = new EcSerializer(['ec_profile', 'most_recent_ec_state_rating']);

  $resource = $serializer->resource($ec);

  $document->setData($resource);

  return $document->toArray();
}

/**
 * Helper function to flatten an entity's fields.
 *
 * @param string $entity_type
 *   Drupal entity type.
 * @param object &$entity
 *   An entity object.
 */
function _esdportal_api_flatten_entity_fields($entity_type, &$entity) {
  if (isset($entity->vocabulary_machine_name)) {
    $entity->machine_name = $entity->vocabulary_machine_name;
  }
  \Drupal\esdportal_api\EcDataUtils::flattenFields($entity_type, $entity);
}

/**
 * Given a taxonomy term, find the first node related to it & return its nid.
 *
 * @param string $bundle
 *   Content type.
 * @param object $term
 *   Taxonomy term.
 *
 * @return int
 *   node id
 */
function _esdportal_api_get_related_nid($bundle, $term) {
  $nid = db_query("SELECT ti.nid FROM taxonomy_index AS ti INNER JOIN node AS n ON n.nid=ti.nid WHERE ti.tid=:tid AND n.type=:bundle", array(':tid' => $term->tid, ':bundle' => $bundle))->fetchField();

  return $nid;
}

/**
 * Retrieves list of all early childhood centers.
 *
 * @param string $includes
 *   Related datasets to include, comma-separated.
 * @param int $limit
 *   If null, return all results.
 * @param int $offset
 *   Offset starting record.
 *
 * @return array
 *   JSON-API data.
 */
function _esdportal_api_index_ecs($includes = NULL, $limit = NULL, $offset = 0, $flatten_fields = FALSE) {
  $document = new Document();

  $ecs = _esdportal_api_taxonomy_get_tree(19);

  // Paginate.
  $total = count($ecs);
  $ecs = array_slice($ecs, $offset, $limit, TRUE);
  $link_to_self = $_SERVER['REQUEST_URI'];

  $includes = (strlen($includes) > 0) ? explode(',', $includes) : NULL;

  $serializer = ($includes) ? new EcSerializer($includes) : new EcSerializer();

  foreach ($ecs as &$ec) {
    if ($flatten_fields) {
      _esdportal_api_flatten_entity_fields('taxonomy_term', $ec);
    }

    $ec->ec_profile_id = _esdportal_api_get_related_nid('ec_profile', $ec);
  }
  unset($ec);

  if (in_array('ec_profile', $includes)) {
    foreach ($ecs as $ec) {
      if ($ec->ec_profile_id) {
        $ec->ec_profile = node_load($ec->ec_profile_id);

        if ($flatten_fields) {
          _esdportal_api_flatten_entity_fields('node', $ec->ec_profile);
        }
      }
    }
  }

  if (in_array('most_recent_ec_state_rating', $includes)) {
    foreach ($ecs as $ec) {
      $ec->most_recent_ec_state_rating = (object) _esdportal_api_retrieve_ec_state_rating(\Drupal\esdportal_api\EcDataUtils::getEcId($ec));
      $ec->most_recent_ec_state_rating_id = $ec->most_recent_ec_state_rating->rating_id;
    }
  }

  $collection = $serializer->collection($ecs);

  $document->setData($collection);

  $document->addMeta('total', $total);
  $document->addLink('self', $link_to_self);

  return $document->toArray();
}

/**
 * Retrieves an ec_state_rating.
 *
 * Retrieves a single EC Center's rating with given timestamp or most recent
 * timestamp if none is given.
 *
 * @param int $esd_ec_id
 *   Early childhood center ID.
 * @param int $batch_timestamp
 *   The specific timestamp to grab. If null, return most recent one.
 *
 * @return array
 *   State rating data.
 */
function _esdportal_api_retrieve_ec_state_rating($esd_ec_id, $batch_timestamp = NULL) {
  if (isset($batch_timestamp) && $batch_timestamp > 0) {
    $rating = db_query('SELECT * FROM {ec_state_ratings} WHERE timestamp=:batch_timestamp AND esd_ec_id=:esd_ec_id', array(':esd_ec_id' => $esd_ec_id, ':batch_timestamp' => $batch_timestamp))->fetchAssoc();
  }
  else {
    $rating = db_query('SELECT * FROM {ec_state_ratings} WHERE timestamp=(SELECT MAX(timestamp) FROM {ec_state_ratings}) AND esd_ec_id=:esd_ec_id', array(':esd_ec_id' => $esd_ec_id))->fetchAssoc();
  }
  return $rating;
}

/**
 * Lists all batch timestamps.
 *
 * Not offered via api yet.
 */
function _esdportal_api_index_ec_state_ratings_batches() {
  return db_query('SELECT DISTINCT(timestamp) FROM {ec_state_ratings} ORDER BY timestamp DESC')->fetchAssoc();
}

/**
 * Lists ec_state_ratings.
 *
 * Lists set of EC state ratings with given timestamp or most recent timestamp,
 * if none is given.
 *
 * @param int $batch_timestamp
 *   The specific batch timestamp to retrieve. If null, retrieve most recent
 *   batch.
 *
 * @return array
 *   Array of ec state rating data.
 */
function _esdportal_api_index_ec_state_ratings($batch_timestamp = NULL) {
  if (isset($batch_timestamp) && $batch_timestamp > 0) {
    $ratings = db_query('SELECT * FROM {ec_state_ratings} WHERE timestamp=:batch_timestamp', array(':batch_timestamp' => $batch_timestamp))->fetchAssoc();
  }
  else {
    $ratings = db_query('SELECT * FROM {ec_state_ratings} WHERE timestamp=(SELECT MAX(timestamp) FROM {ec_state_ratings})')->fetchAll();
  }

  return array('ec_state_ratings' => $ratings);
}

/**
 * Retrieves a single school.
 *
 * @param int $id
 *   ESD internal school id.
 * @param string $includes
 *   Related datasets to include, comma-separated.
 * @param bool $flatten_fields
 *   If true, remove l10n structure & other drupal structures from response.
 *
 * @return array
 *   JSON-API data
 */
function _esdportal_api_retrieve_school($id, $includes, $flatten_fields = FALSE) {
  $document = new Document();

  $school = taxonomy_term_load($id);

  if (!$school || ($school->vid != 4)) {
    return services_error(t('school @id does not exist.', array('@id' => $id)), 404);
  }

  $includes = (strlen($includes) > 0) ? explode(',', $includes) : NULL;

  // Add school_profile by default if no other includes are specified.
  if (!count($includes)) {
    $includes[] = 'school_profile';
  }

  $serializer = ($includes) ? new SchoolSerializer($includes) : new SchoolSerializer();

  $schools = [$school];

  _esdportal_api_load_includes_for_schools($schools, $includes, $flatten_fields);

  $resource = $serializer->resource($schools[0]);

  $document->setData($resource);

  return $document->toArray();
}

/**
 * Retrieves list of all schools.
 *
 * @param string $includes
 *   Related datasets to include, comma-separated.
 * @param int $limit
 *   If null, return all results.
 * @param int $offset
 *   Offset starting record.
 *
 * @return array
 *   JSON-API data.
 */
function _esdportal_api_index_schools($includes = NULL, $limit = NULL, $offset = 0, $flatten_fields = FALSE) {
  $document = new Document();

  $schools = _esdportal_api_taxonomy_get_tree(4);

  // Paginate.
  $total = count($schools);
  $schools = array_slice($schools, $offset, $limit, TRUE);
  $link_to_self = $_SERVER['REQUEST_URI'];

  $includes = (strlen($includes) > 0) ? explode(',', $includes) : [];

  $serializer = ($includes) ? new SchoolSerializer($includes) : new SchoolSerializer();

  _esdportal_api_load_includes_for_schools($schools, $includes, $flatten_fields);

  $collection = $serializer->collection($schools);

  $document->setData($collection);

  $document->addMeta('total', $total);
  $document->addLink('self', $link_to_self);

  return $document->toArray();
}

/**
 * Lists all data tables.
 *
 * @return array
 *   Data table names.
 */
function _esdportal_api_get_school_data_tables() {
  $potential_data_tables = \Drupal\esdportal_api\EcDataUtils::getDataTablesWithBcodes();
  return \Drupal\esdportal_api\EcDataUtils::extractDataTableNames($potential_data_tables);
}

/**
 * Loads all includes for a set of schools.
 *
 * @param array &$schools
 *   School entities.
 * @param array $includes
 *   Datasets to include.
 * @param bool $flatten_fields
 *   Whether or not to flattenFields.
 */
function _esdportal_api_load_includes_for_schools(array &$schools, array $includes = [], $flatten_fields = NULL) {
  $potential_data_tables = \Drupal\esdportal_api\EcDataUtils::getDataTablesWithBcodes();
  $potential_data_table_names = \Drupal\esdportal_api\EcDataUtils::extractDataTableNames($potential_data_tables);

  $tables_to_include = array_intersect($potential_data_table_names, $includes);

  foreach ($schools as &$school) {
    $school->bcode = $school->field_bcode['und'][0]['value'];

    if ($flatten_fields) {
      _esdportal_api_flatten_entity_fields('taxonomy_term', $school);
    }

    $school->school_profile_id = _esdportal_api_get_related_nid('school_profile', $school);
  }
  unset($school);

  if (in_array('school_profile', $includes)) {
    foreach ($schools as &$school) {
      if ($school->school_profile_id) {
        $school->school_profile = node_load($school->school_profile_id);

        if ($flatten_fields) {
          _esdportal_api_flatten_entity_fields('node', $school->school_profile);
        }
      }
    }
  }
  unset($school);

  if (count($tables_to_include) > 0) {
    // we've got some data tables to include!
    foreach ($schools as &$school) {
      foreach ($tables_to_include as $table) {
        $table_info = $potential_data_tables[$table];
        $data_table_identifier = $table_info->name;

        $q = db_select($table_info->name)
               ->fields($table_info->name)
               ->condition($table_info->table_schema['primary key'][0], $school->bcode);

        $res = $q->execute();

        $data = $res->fetchObject();

        $school->{$data_table_identifier} = ($data) ? $data : FALSE;
      }
    }
    unset($school);
  }
}

/**
 * Load vocabulary terms.
 *
 * Loads a whole taxonomy vocabulary, with sort and filter options akin to
 * commerce_services.
 *
 * @param int $vid
 *   Taxonomy vocabulary id.
 *
 * @return array
 *   Array of term objects.
 */
function _esdportal_api_taxonomy_get_tree($vid) {
  // Bare minimum.
  $terms = taxonomy_get_tree($vid, 0, NULL, TRUE);

  return $terms;
}
